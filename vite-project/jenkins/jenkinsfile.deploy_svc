def accountId = ""
switch(params.ENVIRONMENT) {
  case "local-dev":
    accountId = "977314462590"
    break
  case "local-stg":
    accountId = "303647563259"
    break
  case "local-uat":
    accountId = "747761526747"
    break
  case "local-uk":
    accountId = "607444552298"
    break
  case "local-us":
    accountId = "126264810980"
    break
  case "area-na":
    accountId = "126264810980"
    break
  case "local-sbox":
    accountId = "963978185499"
    break
  default:
    throw new Exception("Environment is not supported")
}

pipeline {
  libraries {
    lib "jenkins-shared-library"
  }
  agent {
    kubernetes {
      inheritFrom 'jenkins-tools'
      idleMinutes 20
      yaml """
apiVersion: v1
kind: Pod
metadata:
  name: notes-web-app-deploy-pod
  annotations:
    iam.amazonaws.com/role: "arn:aws:iam::${accountId}:role/k8s-pipeline-cloud-resource-management"
spec:
  containers:
  - name: node
    image: node:16
    imagePullPolicy: Always
    command: ["/bin/bash"]
    tty: true
  nodeSelector:
    type: tools
  tolerations:
  - effect: NoSchedule
    key: type
    operator: Equal
    value: tools
"""
    }
  }
  stages {
    stage('Checkout branch') {
      steps {
        checkout scm: [
          $class: 'GitSCM',
          userRemoteConfigs: [
            [credentialsId: 'devops-github-pat', url: "https://github.com/DubberSoftware/notes-web-app.git"]
          ],
          branches: [
            [name: params.RELEASE_TAG != 'default' ? "refs/tags/${params.RELEASE_TAG}" : params.BRANCH_NAME]
          ]
        ], poll: false
      }
    }
    stage('Build Service') {
      steps {
        container(name: 'node', shell: '/bin/bash') {
          withCredentials([gitUsernamePassword(credentialsId: 'devops-github-pat')]) {
            sh """
                ENV="${params.ENVIRONMENT}" make install
                ENV="${params.ENVIRONMENT}" make build
              """
          }
        }
      }
    }
    stage('Deploy Build Output') {
      steps {
        container('jenkins-tools') {
          container('node') {
            script {
              switch(env.ENVIRONMENT) {
                case 'local-dev':
                  env.S3_BUCKET = "s3-bucket-notes-web-app-local-dev"
                  env.CLOUDFRONT_ID = "E15T1QE5QBX12I"
                  break
                case 'local-stg':
                  env.S3_BUCKET = "s3-bucket-notes-web-app-local-stg"
                  env.CLOUDFRONT_ID = "E2BT29JQ5DRK3W"
                  break
                case 'local-uat':
                  env.S3_BUCKET = "s3-bucket-notes-web-app-local-uat"
                  env.CLOUDFRONT_ID = ""
                  break
                case 'local-sbox':
                  env.S3_BUCKET = "s3-bucket-notes-web-app-local-sbox"
                  env.CLOUDFRONT_ID = "E1WJT3GFX9DWUF"
                  break
                case 'local-us':
                  env.S3_BUCKET = "s3-bucket-notes-web-app-local-us"
                  env.CLOUDFRONT_ID = "E39WYTZPMLESBW"
                  break
                case 'local-uk':
                  env.S3_BUCKET = "s3-bucket-notes-web-app-local-uk"
                  env.CLOUDFRONT_ID = "E1DYEDH19KY1JW"
                  break
              }
            }
            withCredentials([gitUsernamePassword(credentialsId: 'devops-github-pat')]) {
              sh """
                    apt update -y >> /dev/null
                    apt install awscli jq -y >> /dev/null
                    aws s3 sync ./build s3://${S3_BUCKET}/build \
                      --metadata Cache-Control=no-cache
                  """
            }
          }
        }
      }
    }
    stage('Purge Cache') {
      steps {
        container('jenkins-tools') {
          container('node') {
            withCredentials([gitUsernamePassword(credentialsId: 'devops-github-pat')]) {
              script {
                if (params.PURGE_CACHE == true) {
                  sh """
                      aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths "/*"
                    """
                } else { 
                  sh """
                      echo "Skipping cache purge"
                    """
                }
              }
            }
          }
        }
      }
    }
  }
}